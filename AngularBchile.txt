	1.-Introducción
Instalaciones necesarias
->https://gist.github.com/Klerith/607dd6bb60b5a70bc5e4d9c81ef6501e
  a.-Google Chrome
  b.-Visual Studio Code
  c.-Postman
  d.-Mongo Compass
  e.-Git
  f.-Crear cuenta en GitHub
  g.-Angular y extensiones
  
INSTALACION ANGULAR  
#########################################################
Instalar node desde la pagina web https://nodejs.org/en/
> node -v
  
Angular CLI
>npm install --location=global @angular/cli
>ng v
>ng --help
>ng new bases   //Crear nuvo proyecto base
>ng serve -o    //Para compilar y levantar el proyecto
#########################################################

2.-Conceptos generales
Tipado extricto que ayuda a desarrolladores nuevos a comprender el código
Inyección de dependencias: Para no estar buscando una clase

3.-Bases de typescript
  a.-Introducción a TypeScript
      proyecto base:  https://github.com/Klerith/curso-angular-intro-typescript-ecmascript/releases/tag/v1.0.1
      1.-subir a carpeta de proyecto de ejemplo
	  2.-Ejecutar > npm install  (debe estar package.json)-> Para instalar las dependencias de package.json
	  
	  Al querer ejecutar el ejemplo desde el menu a la izquierda "NPM SCRIPTS" aparece el siguiente error
	     PS C:\proyectos\proyectosAngular\curso-angular-intro-typescript-ecmascript\curso-angular-intro-typescript-ecmascript-1.0.1> auto run start        
         auto : El término 'auto' no se reconoce como nombre de un cmdlet, función, archivo de script o programa ejecutable. Compruebe si escribió         
         correctamente el nombre o, si incluyó una ruta de acceso, compruebe que dicha ruta es correcta e inténtelo de nuevo.
		 
     Mejor ejecutar del terminal:
     > npm start
         Para que eso funcione, recuerden que deben de ejecutar ese comando en el mismo directorio donde se encuentra el ```package.json```

  b.-Tipos básicos
        https://www.typescriptlang.org/docs/handbook/basic-types.html
  c.-Objetos, arreglos e interfaces
  d.-Funciones y sus argumentos
  e.-Desestructuración de arreglos y objetos
  f.-Importaciones y exportaciones
  g.-Clases, constructores
  h.-Tipos genéricos

Decoradores

Encadenamiento opcional

4.- Intro a Angular
	30-Componentes, se usa .ts, .html ,css
	32 Framework , viene con todo lo necesario para trabajar
	33 Nuestro primer proyecto en Angular
		- ng version  				//validar angular
		- ng new consultaPos  		//Para iniciar el proyecto
		- ng serve -o				// (modificar y poner -o en package.json) es como un emulador para ir viendo como queda nuestro proyecto (levanta un web server) open your browser on http://localhost:4200/
		- npm start  inician nuevamente (se botè el servidor con control c)
		
	35 Explicaciòn de cada archivo
		- src/main.ts    			//es el archivo principal que inicia la app
		- src/app					//es la carpeta donde trabajaremos nuestra app
		- src/app/app.components.ts //es donde se define el componente que usamos en index.html
		
	36 App Component
		- Eliminar contenido de /src/app/app.component.html y poner <h1>Hola Mundo</h1>
		
		
    DE YOUTUBE:  https://www.youtube.com/watch?v=mTTVJcr0D_I
		- ng new consultaPos	//crea proyecto
		- eliminar contenido de /src/app/app.component.html y dejar:
			- <router-outlet></router-outlet>
		- ng g c home			//crear componente home	
		- eliminar /src/app/home/home.component.spec.ts	//elimina dado que no haremos test
		- modificar /src/app/app-routing.module.ts
			const routes: Routes = [
				{ path: '', component: HomeComponent},  //aggregar esta línea
			];
		- modificar archivo /src/app/app.module.ts
			- agregar import
				import { HttpClientModule} from '@angular/common/http'
			- importar el modulo Http
				 imports: [
					BrowserModule,
					AppRoutingModule,
					HttpClientModule    //Esta es la línea nueva
				 ],
			
		- Creamos el servicio
			- ng g s /service/api     //ng generate service
		- Borrar /src/app/service/spi.service.spec.ts  //dado que no hacemos test
		
		- Modificar archivo /src/app/service/api.service.ts
			import { Injectable } from '@angular/core';				//Agrega
			import {HttpClient} from '@angular/common/http';		//Agrega
			import {Observable} from 'rxjs';

			@Injectable({
			  providedIn: 'root'
			})
			export class ApiService {
			  private urlApi = 'localhost:8090/api/productos/listar-productos';		//Agrega
			  constructor(private http: HttpClient) { }								//Modifica

			  public getData(): Observable<any>{									//Agrega
				return this.attp.get<any>(this.urlApi);
			  }
			}

		  -ERROR CORS ver este link:  https://medium.com/weekly-webtips/do-you-know-how-to-resolve-cors-issues-in-angular-9d818474825f
			- agregar proxy
			- arrancar con
				ng serve
				
		  - Dokerizar: ver: https://amoelcodigo.com/docker-angular-app/
		  
			
-Servicios 
-Directivas (de componentes, estructurales , de atributos)
-Rutas
-Módulos
   
   
27 Despliegue en producción



Youtube graficos en angular  https://www.youtube.com/watch?v=IBj6oX1AMkU
https://swimlane.gitbook.io/ngx-charts/examples/pie-charts/advanced-pie-chart
1.-Instalar
	npm install @swimlane/ngx-charts --save
	
2.- modificar app.modules.ts
	Agregar linea NgxChartsModule en imports
		  imports: [
			NgxChartsModule
		  ],
		  
3.- copiar el componente de graficos en home.component.html
<ngx-charts-advanced-pie-chart
  [view]="view"
  [scheme]="colorScheme"
  [results]="single"
  [gradient]="gradient"
  (select)="onSelect($event)"
  (activate)="onActivate($event)"
  (deactivate)="onDeactivate($event)"
  >
</ngx-charts-advanced-pie-chart>

4.- copiar el siguiente código en app.component.ts
export class AppComponent {
  single: any[];
  view: any[] = [700, 400];

  // options
  gradient: boolean = true;
  showLegend: boolean = true;
  showLabels: boolean = true;
  isDoughnut: boolean = false;

  colorScheme = {
    domain: ['#5AA454', '#A10A28', '#C7B42C', '#AAAAAA']
  };

  constructor() {
    Object.assign(this, { single });
  }

  onSelect(data): void {
    console.log('Item clicked', JSON.parse(JSON.stringify(data)));
  }

  onActivate(data): void {
    console.log('Activate', JSON.parse(JSON.stringify(data)));
  }

  onDeactivate(data): void {
    console.log('Deactivate', JSON.parse(JSON.stringify(data)));
  }
}

5.- dentro de carpeta app crear data.ts
export var single = [
  {
    "name": "Germany",
    "value": 8940000
  },
  {
    "name": "USA",
    "value": 5000000
  },
  {
    "name": "France",
    "value": 7200000
  },
    {
    "name": "UK",
    "value": 6200000
  }
];

6.- Agregar siguiente lib a app.modules.ts
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';