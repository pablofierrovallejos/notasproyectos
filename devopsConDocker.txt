Instalar samba server (https://phoenixnap.com/kb/ubuntu-samba)
	Puertos que usa:
		139/tcp  open  netbios-ssn
		445/tcp  open  microsoft-ds

	sudo apt update
	sudo apt install samba -y
	whereis samba			//valida instalación
	samba -V				//Para ver la version instalada
	systemctl status smbd	//Para confirmar que samba está corriendo
	
	sudo mkdir -p /home/sharing		//Crear una ruta que se pueda mostrar
	sudo vim /etc/samba/smb.conf	//Editar configuracion samba
	
enp5s0:
	

Instalar webmin  ---> (https://www.digitalocean.com/community/tutorials/how-to-install-webmin-on-ubuntu-20-04)
		https://192.168.0.102:10000/init/reboot.cgi?confirm=Reboot%20System&xnavigation=1
		(Para monitorear recursos cpu mem en pc)

Sección 2 conceptualizacion Docker			
	8.- Arquitectura interna de docker
		- Docker engine
		- Docker  cli
		- Docker: buildx plugin
		- Docker compose
		- Docler container.io (almacenamiento imagenes y logs (proyecto aparte)
		- Docker desktop
	9 Instlación docker en linux: docs.docker.com/engine/install/ubuntu
	- sudo apt-get update
	-sudo docker -v
	-sudo docker compose version
	-sudo groupadd docker	//agrega grupo docker
	-sudo usermod -aG docker $USER	//modifica user docker

	Rotación de logs
	- crear fichero daemon.json
	- sudo nano /etc/docker/daemon.json //copiar contenido de la web
	- docker ps -a	//ver todos los contenedores

Sección 3 Primer acercamiento
	- Aplicación de faturación
		- docker images ls				//Para ver las imagenes
		- docker images rm idimagen		//eliminar una imagen
		- docker pull sotobotero/udemy-devops:0.0.1		//clonar una imagen de docker hub
		- docker run -p 80:80 -p 8080:8080 --name billing sotobotero/udemy-devops:0.0.1
		
		- docker ps -a 					//Para ver contenedores
		- docker logs idcontenedor		//Para ver el log del contenedor en caso de que tengamos un error
		- dockert stop idcontenedor		//Detener contenedor
		- docker start idcontenedor		//inicializar contenedor
		- docker rm idcontenedor		//eliminar contenedor
		
	Comandos usados en la clase de docker compose
		- docker-compose -f stackdb.yml pull		//Descargar las imagenes usndo docker-compose
		- docker-compose -f stackdb.yml up -d		//Inicar los contenedores

		http://localhost:9090/			Url de la inteface de adminer

	Los comandos nuevos utilizados son para crear una imagen:
		- docker build -t billingapp:prod --no-cache --build-arg JAR_FILE=target/*.jar .		//Costruir la imagen
		- docker run -p 80:80 -p  8080:8080 --name billingapp billingapp:prod					//Levantar el contendor para probar

		- docker tag billingapp:prod sotobotero/udemy-devops:0.0.2		//Darle un nuevo tag
		- docker login (usas tu usario y contraseña)						//loguearse en el docker engine hacia docker hub
		- docker push sotobotero/udemy-devops:0.0.2						//hacer un push de la imagen
		
	Instalar postgress (usar archivo ya creado)	
		 --> stackdb.yml 	//archivo yml con datos de repos docker hub
		- docker-compose -f stackdb.yml pull		//Para hacer pull de la base de datos y del admin de posgress
		- docker image ls							//Revisar que se hayan descargado las imagenes	


	Docker compose, orquestar un servicio con 2 imagenes		
	
	
Sección 6 Kubernetes	
	
		minikube dashboard		//Lanzar el dashboard de minikube
		kubectl run kbillingapp --image=sotobotero/udemy-devops:0.0.1 --port=80 80	//crear un pod partiendo d euna imagne en dockerhub
		kubectl get pods		//Listar todos los pod del namespace por defecto
		kubectl describe pod kbillingapp	//Obtener detalles del Pod
		kubectl expose pod kbillingapp --type=LoadBalancer --port 8080 --target-port=80  //Crear el servicio
		minikube service kbillingapp		//Obtener la ipexterna del servicio en minikube
		kubectl logs kbillingapp			//Obtener los logs de un servicio
		kubectl delete service kbillingapp	//Eliminar un pod
		kubectl delete service kbillingapp	//Eliminar un servicio
		kubectl api-versions				//Consultar la version del apiserver
		echo -n 'qwerty' | base64			//Codificar un parametro
		minikube ip							//consultar la ip de minikube
		echo  "cXdlcnR5" | base64 -d		//Descodificar un parametro

		Comandos necesario para apuntar el docker engine local hacia el registro de minikube
		minikube docker-env
		eval $(minikube -p minikube docker-env)



Kubernates
	Sistema opensource para automatizar despliegue, escalado y administracion de aplicaciones
	en contenedores. Tambien conocido como k8s

	
	Master Nodes  
		Scheduler 			(controla el despliegue en un nodo disponible)
		Controller Manager	(agentes que monitorean la infraestructura)
		etcd				(base datos de cluster kubernates)
		Api Server			(Interface con la que interactuamos con el cluster) ------------>kubectl
	
	Workers Nodes
		Networking			(Expone a inernet o no, red virtual)
		Kubelet				(Agente de monitorear que contenedores corran dentro de un pod)
		Container			(Contenedor Docker o podman, microservicio, base datos, frontend)
		SO					()
		
		
Tipos de instalaciones o clusters
	- On-Premise
		Los que se encuentran en la propia empresa
			- All in one
			- Single Master and worker
			- Single Master, Single etcd and Multiworker
			- Multi Master, and multiworker
			
	- Gestionados
		- Amazon
		- Azure
		- Google
		- IBM
		
		
	Pods: Unidad más pequeña que se puede desplegar y gestionar en kubernates. Es un grupo 
			de uno o más contenedores que comparten almacenamiento y red
	Deployments: 
	Config Maps: Permite desacoplar la configuracion para hacer las imagenes mas portables, almacena
				variables de entorno, argumentos para la linea de comandos, o configuracion de volumenes
				que pueden consumir los pods.
				
Sección 9
	70.-
	CI/CD Cuntinuos Intrgration/Continuos Delivery
	CI: Jenkins detecta cambios en github y hace: compilacion y ejecución de pruebas, se envía reporte a 
	    develops (slack), luego se decide enviar el merge.
	CD: Extiende a CI agregando funcionalidades de despliegue en entornos de prueba y producción.
	
	71: Instalar Jenkins (usua ubuntu)
		Dockerfile:

			FROM jenkins/jenkins
			USER root
			#Define variables
			ENV MAVEN_VERSION 3.9.0

			#Update Base OS and install additional tools
			RUN apt-get update && apt-get install -y wget
			RUN  wget --no-verbose https://downloads.apache.org/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz -P /tmp/
			RUN tar xzf /tmp/apache-maven-$MAVEN_VERSION-bin.tar.gz -C /opt/ 
			RUN ln -s  /opt/apache-maven-$MAVEN_VERSION /opt/maven 
			RUN ln -s /opt/maven/bin/mvn /usr/local/bin 
			RUN rm /tmp/apache-maven-$MAVEN_VERSION-bin.tar.gz 

			#Set up permissions
			RUN chown jenkins:jenkins /opt/maven;
			ENV MAVEN_HOME=/opt/mvn
			USER jenkins

		Compilar: > docker build -t jenkins-cicd --no-cache .                               //crea imagen nombre jenkins-cicd  //no considera cache
		Ejecutar: > docker run -p 8080:8080 -p 50000:50000 --name jenkins jenkins-cicd      //nombre contenedor: jenkins, nombre imagen jenkins-cicd
		Abrir explorador  localhost:8080
		Obter el user > docker logs jenkins
						buscar el hash y pegar en login
		Instalar plugin sugeridos
		Crear usuario admin/admin
		
	72: Pipeline --> Trigger-> Stage 1 --> Agent --> Job --> Step --> Script --> Delivery
							   Stage 2                            --> Task 
	    Ejemplo diseño pipeline:
				jenkins -> Pull git -> builf-> Install
	73 Configurar GitHub
		1.- Crear nuevo repositorio miuser/devops_udemy
				- seguir las instrucciones que nos da github repo HTTPS 
				- Generar token para configurar en git
				  - Vamos a perfil->settings -> developers settings -> personal access tokens ->generate new token -> note: jenkins -> expire-> never
				            -> select scope-> marcar Todo y generar token
							-> Guardar en un lugar seguro: 
				- > git push -u origin master
					 ingresar user:
					 ingresar pass: (pegar token)
	74 Crear pipeline	
		1.- Create a Job-> Free style project-> source code managment -> git ->
	    2.- Build trigger-> Build steps-> add build step -> invoke top-level maven target
		               +  clean install
	75 Ejecutar y debuguear pipeline 
			