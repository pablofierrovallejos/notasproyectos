
2 Microservicios: La base
	-se agregan los siguientes componentes
		- Spring Boot DevTools
		- Spring Web
		- Spring Data JPA
		- Hibernate (Para javax.persistence.Entity"
		- H2 (base de datos en memoria)(no es para producción)
	-Configurar microservicio en resources/application.properties
		spring.application.name=servicio-productos
		server.port=8001
		
		# H2 Database
		spring.h2.console.enabled=true					//Esto para entrar a la consola por web https://www.geeksforgeeks.org/spring-boot-h2-database/
		spring.datasource.url=jdbc:h2:mem:dcbapp		//Esto se pone en consola web para conectar
		spring.datasource.driverClassName=org.h2.Driver
		spring.datasource.username=sa
		spring.datasource.password=password
		spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
	- Crear package
		- com.nombre.springboot.productos.models.entity
			- crear clase Entity 
			
	-Creando el repositorio JPA para los productos
		-Crear Interface ProductoDao.java -> en package productos.models.dao
		-Crear clase IProductoService     -> en package productos.models.service
	-Balanceo de carga con Ribbon
	
	- Para obtener datos del properties
	@Autowired
	pirivate Environment env;
	Integet puerto = Integer.parseInt(env.getProperty("nombredelproperty"));
	
3.-	Eureka Server: registrando microservicios
	>New Spring Sterter Project
		-> add Spring Boot DevTools
		-> add Eureka Server
	> Add en application properties (Esto es para el servidor)
		spring.application.name=servicio-eureka-server
		server.port=8761
		eureka.client.register-with-eureka=false
		eureka.client.fetch-registry=false
		eureka.client.service-url.defaultZone=http://localhost:8761/eureka
		logging.level.org.hibernate.SQL=debug           //para mostrar las sentencias sql al ejecutar
		
	> Configurar el microservicio cliente
		>Click derecho en proyecto->Spring->Add Starter->
			>Agregar Cloud Discovery->Eureka Discovery
	> cambiar el puerto fijo por puerto dinámico en properties a todos los micros clientes
		server.port=${PORT:0}
		eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}
	> Crear las clases Usuarios y Roles

	> Compilar jar
		- Ir a la raíz del proyecto
		- .\mvnw.cmd clean package		//limpiar proyecto y empaqueta (queda en carpeta target)
		- java -version   				//validar que version de nuestro so sea el mismo del pom del proyecto
		- java -jar ./target/miapp.jar	//para probar nuestra app
    > Construir imagen
		
		
	>Ejecutar
		docker run -d -p 8761:8761 --name servicio-eureka-server servicio-eureka-server:v1

		>docker run -dit  -p 8761:8761 --name servicio-eureka-server servicio-eureka-server:v1 --network springcloud


4.-Spring Cloud API Gateway (vs Zuul)
	Configurando Spring Cloud Gateway
	>New Spring starter project
		> add Spring Boot DevTool
		> add Eureka Discovery Client
		> add Gateway
		
		>Build
			docker build -t servicio-gateway-server:v1 .
		>Run
			docker run -d -p 8090:8090 --name servicio-gateway-server servicio-gateway-server:v1
			
			docker run -dit  -p 8090:8090 --name servicio-gateway-server servicio-gateway-server:v1 --network springcloud

6.- Spring Cloud Config Server
	>Crear microservicio springboot-servicio-config-server
		>Add DevTool
		>Add Config Server
		>probar con postman
			> GET localhost:8888/servicio-items/default
			
	>Crear repo git
		C:\Users\Gamer\Desktop\config>git config --global user.email "pablofierrovallejos@gmail.com"
		C:\Users\Gamer\Desktop\config>git config --global user.name "pablofierrovallejos"
		C:\Users\Gamer\Desktop\config>git init
		echo server.port=8005 > servicio-items.properties
	>Modificar starters a servicio items
		>Add Config Client
		>Crear archivo bootstrap.properties en resources (archivo de arrangue)(boostrap manda, esto no se puede sobrescribir en application.properties)
			spring.application.name= servicio-items
			spring.cloud.config.uri=http://localhost:8888
		
		
			
9 Oauth2 y jwt
Proveedor de Seguridad LDAP
	*** sub capitulo 78 Intro a jwt
	- Lo mas sencillo es trabajar con sesiones (para una app que tiene todo (no microservicios)
	- Se usan token para integrar diferentes aplicaciones
	- jwt tiene toda la info del usuario, (se puede decodificar y leer, no puede llevar contraseñas)
	- Si no se establece tiempo de caducidad no se caduca nunca, lo común es que dure 2 o 3 semanas (1 hora esta ok)
	- Es stateless
	- Flujo
		1.- Login (autenticación) , se envía usuario y pass al server
		2.- Servidor valida usuario y genera el token jwt para enviar al cliente
		3.- Cliente hace una petición de api con el token
		4.- Servidor valida token y obtiene permisos del usuario para autorizar acceso al api
	*** sub capitulo 79 algo mas de jwt
		- revisar https://jwt.io/
		- JWT se compone de 3 partes
			1.- HEADER
			2.- DATA  (codificada en base64)
			3.- VERIFY SIGNATURE
		- Desde la web se puede obtener el token desde F12->Application->Storage->LocalStorage
		- separar un token
			let token = eltoken
			let payload = token,split(".")[1]
			window.atob(payload)
			JSON.parse(window.atob(payload))
		- Para implementacion usamos de spring.io  -> Spring Security OAUTH
	*** sub capitulo 80
		Oauth se compone de 2 partes
		- Servidor> de Autorizador (autentica al usuario y genera el jwt)
		- Servidor> Resource Server(administra los permisos y accesos al recurso)
		- Lo que se tiene que enviar al servidor de autorizacion
			url: POST/auth/token
				header
					Authorization: Basic Base64(client_id:client_secret)
					Content-Type:  application/x-www-form-urlencoded
				body
					grant_type = password
					username= andres
					password = 12345
		  			
		 - Lo que se tiene que enviar al servidor de recursos
			url: GET /api/clientes
			header: Authorization Bearer access_token  <-- el token obtenido del paso anterior
			body: la data
			
	*** sub capituo 81
		- creando microservicio usuarios
			- 
			
			
			ServDeAutoriz <------>Usuarios 
			      A        /------A  
			      |     /--
				  V /---
                 Zuul <--------------------> Servidor ---> git
             Servidor de recursos		       Config		 
					
		- crear proyecto usuarios
			- agregar dependencias
				- Eureka Discovery Client
				- Spring boot dev tools
				- Sprig Web Starter
				- Spring Data JPA
				- H2 database
		- agregar a application.properties
			  spring.application.name=servicio-usuarios
			  server.port=${PORT:0}
			  eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}
		- crear package .usuarios.models.entity
			- crear clase Usuario y Role
		- Agregar dependencia Rest Repository para generar el controlador
		
		
		
11 Configuracion Datasource Mysql en servicio productos
	>Click derecho en proyecto->Spring->Add Starter->Add MySQL Driver
	>Agregar lo siguiente a application.properties
		  spring.datasource.url=jdbc:mysql://localhost:3306/db_springboot_cloud?serverTimezone=America/Santiago&allowPublicKeyRetrival=true&useSSL=false
		  spring.datasource.username=root
		  spring.datasource.password=sasa
		  spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
		  spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
		  spring.jpa.hibernate.ddl-auto=create   //Es para desarrollo solamente dado que borra las tablas
		  logging.level.org.hibernate.SQL=debug
		  

14 Despliegue
	-docker --version  //Para conocer versión de docker instalada
	-C:\springcloud\workspace\springboot-servicio-productos   //IR a la ruta del proyecto
	
	- .\mvnw clean package    //limpiar proyecto y generar jar   --> se genera el jar en carpeta target de nuestro proyecto
	
		- Fatal error compiling: error: invalid target release: 17 -> [Help 1]
		     - Esto es por que el proyecto tiene una versión java 17 que es distinta a mvn
			 - mvn -version    //Para saber la versión de java que usa mvn aca da 11
			 - podemos revisar la version de java en ide desde:
				-Propiedades del proyecto->Java Compiler
				-Windows->Preference->Java->Compiler
			 -En este caso cambiamos el jdk de maven a 17
				-Se instala el jdk y se valida que quede en C:\Program Files\Java\jdk-17
				-Se cambia variable entorno 	
					-Variable de usuario JAVA_HOME = C:\Program Files\Java\jdk-17
					-Variable de sistema JAVA_HOME = C:\Program Files\Java\jdk-17
			 
	- Creamos archivo Docker en nuestro proyecto
		- Obtenemos jdk de dockerhub -> https://hub.docker.com/search?q=openjdk
		Generamos el Dockerfile con:
			FROM openjdk:17
			VOLUME /tmp
			EXPOSE 8888
			ADD ./target/springboot-servicio-productos-0.0.1-SNAPSHOT.jar servicio-producto.jar
			ENTRYPOINT ["java", "-jar", "servicio-producto.jar"]
	-Ejecutamos el build y desplegamos:
		- docker build -t servicio-productos:v1 .
		- docker images							//Para ver que el contenedor se haya generado ok
		- docker network create springcloud 	//Para crear la red donde estará el contenedor
		       - e17df80419484f9dc0d32b36c121c33bb6f86bb3cd40e03b030704c6ed3b4a9d
		- docker run -p 8001:8001 --name servicio-productos --network springcloud servicio-productos:v1
		- docker container ls		//Para ver los contenedores
		- docker container --help  	//Para ver comandos de container
	    - docker ps -a				//Para ver todos los contenedores no importa su estado
		- docker start fe2c1aac5b4a //Para iniciar un contenedor de la lista anterior que esté detenido
		

	-148 Descargando imagen Docker para MySQL y levantando la instancia
		- vamos a https://hub.docker.com/_/mysql
		  > docker pull mysql:8		//descargar imagen mysql
		  > docker images			//para revisar si descargó imagen
		  > docker run -p 3306:3306 --name microservicios-mysql8 --network springcloud -e MYSQL_ROOT_PASSWORD=sasa -e MYSQL_DATABASE=db_springboot_cloud -d mysql:8
		  > docker logs -f microservicios-mysql8	//Para ver el log del micro
		  > luego podemos conectar por workbench tal cual si fuese local (detener servicio mysql de windows previamente antes de iniciar contenedor )

		  > Para crear volumrn
		    > docker create -v /var/lib/mysql --name mysqldata mysql/mysql-server:latest
			> docker create -v /var/lib/mysql --name mysqldata mysql:8		//mysql:8 = el nombre de la imagen
		  > Para arrancar un contenedor con volumen
			> docker run -p 3306:3306 --name microservicios-mysql8 --network springcloud -e MYSQL_ROOT_PASSWORD=sasa -e MYSQL_DATABASE=db_springboot_cloud  --volumes-from mysqldata -d mysql:8

Desplegar MicroServicio productos
	1.- Crear archivo "Dockerfile" en raiz de nuestro proyecto (SE ELIMINA EL EXPOSE)
			FROM openjdk:17
			VOLUME /tmp
			ADD ./target/springboot-servicio-productos-0.0.1-SNAPSHOT.jar servicio-productos.jar
			ENTRYPOINT ["java", "-jar", "servicio-productos.jar"]
			
	2.- Crear el jar: (Se deshabilita el test dado que no existe la red y no puede conectarse a mysql)
		.\mvnw clean package -DskipTests
			
	3.- Construir la imagen
		docker build -t servicio-productos:v1 . 
	
	4.-Levantar servicio
		docker run -P --network springcloud servicio-productos:v1
Errores
	 Public Key Retrieval is not allowed (ver url config mysql)
	 
	 
	 
	 "fechaventa": "2023-05-23T11:38:34.533+00:00",
	 
	 C:\Users\juanm\Documents\workspace-spring-tool-suite-4-4.19.0.RELEASE
	 
	 
	 C:\Users\juanm\Documents\workspace-spring-tool-suite-4-4.19.0.RELEASE
	 
	 
Para ver redes	 
>docker network ls	 


Crear una red
>docker network create lemoncode-network

Crear contenedor dentro de una red específica
>docker run -dit --name container-a --network lemoncode-network alpine ash

Abrir un contenedor
>docker attach container-b

Ping de un contenedor a otro por su nomnre
>ping -c 3 container-b


Para conectar contenedor a otra red que no sea de ella
>docker network connect lemoncode-network container-2

152 
162 Despliegue de contenedores con docker compose
	Ventaja: para desplegar de forma más organizada con varios servicios
	> docker ps -q			   	  	//Mostrar solo los id de contenedores que están corriendo
	> docker stop $(docker ps -q) 	//Detener todos los contenedores
	> docker rm $(docker ps -a)   	//eliminar todos los contenedores
	> docker-compose --version		//Para ver la versión de docker compose
	
	
    > docker-compose up				//ejecuta el archivo docker-compose.yml (posicionarse en la carpeta donde es´ta el archivo)
	> docker-compose down			//Elimina contenedores y redes (según archivo docker-compose.yml)
	> docker-compose up -d 			//ejecutar detachado similar a docker run			
	> docker-compose logs -f   		//para ver los logs en caso de que se ejecute detachado
	
	
	
	
docker-compose.yml
version: '3.7'
services:
  servicio-eureka-server:
    image: servicio-eureka-server:v1
    ports:
      - "8761:8761"
    restart: always
    networks:
      - springcloud
  servicio-gateway-server:
    image: servicio-gateway-server:v1
    ports:
      - "8090:8090"
    restart: always
    networks:
      - springcloud
  microservicios-mysql8:
    image: mysql:8
    ports:
      - "3306:3306"
    restart: always
    networks:
      - springcloud
    environment:
      MYSQL_DATABASE: db_springboot_cloud
      MYSQL_ROOT_PASSWORD: sasa
	volumes:
	  - mysqldata:/var/lib/mysql
  servicio-productos:
    image: servicio-productos:v1
    ports:
      - "8001:8001"
    restart: always
    networks:
      - springcloud
    depends_on:
      - servicio-eureka-server
      - microservicios-mysql8
networks:
  springcloud:
volumes:
	mysqldata




Volumenes
	docker volume create mivolumen
	docker volume ls
	docker volume inspect mivolumen
	
Ruta windows donde se alojan los archivos de volumenes
	\\wsl.localhost\docker-desktop-data\data\docker\volumes
	
Ruta windows 10 donde se alojan archivos data en mysql normal
	C:\ProgramData\MySQL\MySQL Server 8.0\Data
	
Hacer dump de estructura de tablas mysql 
C:\Program Files\MySQL\MySQL Server 8.0\bin>
	> mysqldump -u root -p db_springboot_cloud > sakila_20200424.sql

Hacer dump de procedimientos almacenados
	> mysqldump --routines --no-create-info --no-data --no-create-db --skip-opt -u root -p db_springboot_cloud > outputfile.sql
	
Restaurar la base de datos
	mysql> drop database sakila;
	mysql> create database sakila;
	mysql -u root -p db_springboot_cloud < sakila_20200424.sql
	mysql -u root -p db_springboot_cloud < outputfile.sql
	
	

	
docker pull 96552333aa/servicio-productos:v1

Para hacer push
	> docker login --username=pablofierrovallejos@gmail.com					//login
	> docker tag servicio-productos:v1 96552333aa/servicio-productos:v1		//docker tag image_name YOUR_DOCKERHUB_NAME/image_name
	> docker push 96552333aa/servicio-productos:v1
	
	> docker tag servicio-gateway-server:v1 96552333aa/servicio-gateway-server:v1
	
	> docker tag servicio-eureka-server:v1 96552333aa/servicio-eureka-server:v1
	> docker push 96552333aa/servicio-eureka-server:v1
	
	> docker tag mysql:8 96552333aa/mysql:8
	> docker push 96552333aa/mysql:8
	
    > docker tag 5f405963d9e0 96552333aa/servicio-ng-front-vtas:v1
	> docker push 96552333aa/servicio-ng-front-vtas:v1
	> docker build -t servicio-ng-front-vtas:v1 .
	> ng build
	> docker-compose up -d
	
Hacer pull
	> docker pull 96552333aa/servicio-productos:v1
	> docker pull 96552333aa/servicio-gateway-server:v1
	> docker pull 96552333aa/servicio-eureka-server:v1
	> docker pull 96552333aa/mysql:8
	> docker pull 96552333aa/mysqlmod

Crear una imagen a partir de un contenedor
	>  docker commit ff357b1f0c66 ubuntuchange
		commit: Comando para crear imagen de docker
		ff357b1f0c66: En el ID del contenedor de la cual vamos a crear una imagen
		ubuntuchange:  Nombre que le damos a la imagen de docker
		
	>  docker commit 337091515d1a  mysqlmod
	
		> docker tag mysqlmod 96552333aa/mysqlmod
		> docker push 96552333aa/mysqlmod
		
		
		
INSTRUCTIVO INSTALACION MICROS
1.- Hacer pull de los micros
	> docker pull 96552333aa/servicio-productos:v1
	> docker pull 96552333aa/servicio-gateway-server:v1
	> docker pull 96552333aa/servicio-eureka-server:v1
	> docker pull 96552333aa/mysqlmod

2.- Clonar repo con dump de base de datos (tablas y proc almacenados)
		1.- https://github.com/pablofierrovallejos/notasproyectos
		
3.- Del repo clonado ir a carpeta y subir servicios:(
		cd docker-compose
		docker-compose up -d     //Subir servicios usando docker-compose.yml

4.- Restaurar la base de datos creada como microservicio
	1.- Detener servicio mysql desde ventana servicio de windows dado que micro usa mismo puerto
	2.- Abrir micro de base de datos e inyectar el dump
		1.- copiar del repo clonado los archivos
			1.- sakila_20200424.sql
			2.- outputfile.sql
		2.- Pegar ambos archivos anteriores en ruta (en el pinguino de mi pc que se crea al instalar docker desktop)
			\\wsl.localhost\docker-desktop-data\data\docker\volumes\docker-compose_mysqldata\_data
				Esta es la ruta del volumen para mantener la persistencia de la base de datos
		3.-Abrir consola del micro de mysql
			1.- docker exec -it df43f0cb22d2 bash   // Donde df43f0cb22d2 es el ID del contenedor (se saca con docker ps)
			2.- ir a la ruta del volumen (dentro del micro)
				  cd /var/lib/mysql
		    3.- Ejecutar la carga de datos (pass es: sa sa)
					mysql -u root -p db_springboot_cloud < sakila_20200424.sql
					mysql -u root -p db_springboot_cloud < outputfile.sql
			4.- salir con exit
			3.- Desde workbench con localhost tal cual hacer refresh para ver si están las tablas y sp
5.- iniciar los contenedores que están detenidos desde docker desktop
6.- Probar con postman
		GET localhost:8090/api/productos/listar-ventas
	
	


Generar servicio Angular
docker build -t servicio-ng-front-vtas:v1 .


ng serve	//Ejecutar angular

ng serve --port 4201	//ejecutar angular en un puerto determinado

ng build				//Para generar el build a distribuit (crea la carpeta dist/miapp)


docker run -d -p 8080:80 servicio-ng-front-vtas:v1

//Para obtener la version de linux (micro nginx)
cat /etc/os-release

curl --location 'http://localhost:8090/api/productos/listar-ventas'

curl --location 'http://172.24.0.3:8090/api/productos/listar-ventas'

curl --location 'http://docker-compose-servicio-gateway-server-1:8090/api/productos/listar-ventas'

# ----------------------------
# build from source
# ----------------------------
FROM node:18 AS build

WORKDIR /app

COPY package*.json .
RUN npm install

COPY . .
RUN npm run build

# ----------------------------
# run with nginx
# ----------------------------
FROM nginx

RUN rm /etc/nginx/conf.d/default.conf
COPY nginx.conf /etc/nginx/conf.d
RUN ls -ltra /usr/share/nginx/html
RUN pwd
COPY --from=build dist/consulta-post /usr/share/nginx/html

EXPOSE 80


Para validar archivo config de nginx  /etc/nginx/nginx.conf
> nginx -t

Para instalar CORS en angular
>  npm -i cors --save

Instalar plugin CORS chrome
https://chrome.google.com/webstore/detail/allow-cors-access-control/lhobafahddgcelffkeicbaginigeejlf?hl=es
