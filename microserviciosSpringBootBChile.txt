
2 Microservicios: La base
	-se agregan los siguientes componentes
		- Spring Boot DevTools
		- Spring Web
		- Spring Data JPA
		- Hibernate (Para javax.persistence.Entity"
		- H2 (base de datos en memoria)(no es para producción)
	-Configurar microservicio en resources/application.properties
		spring.application.name=servicio-productos
		server.port=8001
	-Creando el repositorio JPA para los productos
		-Crear Interface ProductoDao.java -> en package productos.models.dao
		-Crear clase IProductoService     -> en package productos.models.service
	-Balanceo de carga con Ribbon
	
	- Para obtener datos del properties
	@Autowired
	pirivate Environment env;
	Integet puerto = Integer.parseInt(env.getProperty("nombredelproperty"));
	
3.-	Eureka Server: registrando microservicios
	>New Spring Sterter Project
		-> add Spring Boot DevTools
		-> add Eureka Server
	> Add en application properties (Esto es para el servidor)
		spring.application.name=servicio-eureka-server
		server.port=8761
		eureka.client.register-with-eureka=false
		eureka.client.fetch-registry=false
		
	> Configurar el microservicio cliente
		>Click derecho en proyecto->Spring->Add Starter->
			>Agregar Cloud Discovery->Eureka Discovery
	> cambiar el puerto fijo por puerto dinámico en properties a todos los micros clientes
		server.port=${PORT:0}
		eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}

4.-Spring Cloud API Gateway (vs Zuul)
	Configurando Spring Cloud Gateway
	>New Spring starter project
		> add Spring Boot DevTool
		> add Eureka Discovery Client
		> add Gateway

6.- Spring Cloud Config Server
	>Crear nuevo proyecto Spring starter Project
		>Add DevTool
		>Add Config Server
	>Crear repo git
		C:\Users\Gamer\Desktop\config>git config --global user.email "pablofierrovallejos@gmail.com"
		C:\Users\Gamer\Desktop\config>git config --global user.name "pablofierrovallejos"
		C:\Users\Gamer\Desktop\config>git init
		echo server.port=8005 > servicio-items.properties
	>Modificar starters a servicio items
		>Add Config Client
			
9 Oauth2 y jwt
Proveedor de Seguridad LDAP

11 Configuracion Datasource Mysql en servicio productos
	>Click derecho en proyecto->Spring->Add Starter->Add MySQL Driver
	>Agregar lo siguiente a application.properties
		  spring.datasource.url=jdbc:mysql://localhost:3306/db_springboot_cloud?serverTimezone=America/Santiago&allowPublicKeyRetrival=true&useSSL=false
		  spring.datasource.username=root
		  spring.datasource.password=sasa
		  spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
		  spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
		  spring.jpa.hibernate.ddl-auto=create   //Es para desarrollo solamente dado que borra las tablas
		  logging.level.org.hibernate.SQL=debug
		  

14 Despliegue
	-docker --version  //Para conocer versión de docker instalada
	-C:\springcloud\workspace\springboot-servicio-productos   //IR a la ruta del proyecto
	
	- .\mvnw clean package    //limpiar proyecto y generar jar   --> se genera el jar en carpeta target de nuestro proyecto
	
		- Fatal error compiling: error: invalid target release: 17 -> [Help 1]
		     - Esto es por que el proyecto tiene una versión java 17 que es distinta a mvn
			 - mvn -version    //Para saber la versión de java que usa mvn aca da 11
			 - podemos revisar la version de java en ide desde:
				-Propiedades del proyecto->Java Compiler
				-Windows->Preference->Java->Compiler
			 -En este caso cambiamos el jdk de maven a 17
				-Se instala el jdk y se valida que quede en C:\Program Files\Java\jdk-17
				-Se cambia variable entorno 	
					-Variable de usuario JAVA_HOME = C:\Program Files\Java\jdk-17
					-Variable de sistema JAVA_HOME = C:\Program Files\Java\jdk-17
			 
	- Creamos archivo Docker en nuestro proyecto
		- Obtenemos jdk de dockerhub -> https://hub.docker.com/search?q=openjdk
		Generamos el Dockerfile con:
			FROM openjdk:17
			VOLUME /tmp
			EXPOSE 8888
			ADD ./target/springboot-servicio-productos-0.0.1-SNAPSHOT.jar servicio-producto.jar
			ENTRYPOINT ["JAVA", "-jar", "servicio-producto.jar"]
	-Ejecutamos el build y desplegamos:
		- docker build -t servicio-producto:v1 .
		- docker images							//Para ver que el contenedor se haya generado ok
		- docker network create springcloud 	//Para crear la red donde estará el contenedor
		       - e17df80419484f9dc0d32b36c121c33bb6f86bb3cd40e03b030704c6ed3b4a9d
		- docker run -p 8001:8001 --name servicio-producto --network springcloud servicio-producto:v1
		- docker container ls		//Para ver los contenedores
		- docker container --help  	//Para ver comandos de container
	    - docker ps -a				//Para ver todos los contenedores no importa su estado
		- docker start fe2c1aac5b4a //Para iniciar un contenedor de la lista anterior que esté detenido
		

Errores
	 Public Key Retrieval is not allowed (ver url config mysql)