
2 Microservicios: La base
	-se agregan los siguientes componentes
		- Spring Boot DevTools
		- Spring Web
		- Spring Data JPA
		- Hibernate (Para javax.persistence.Entity"
		- H2 (base de datos en memoria)(no es para producción)
	-Configurar microservicio en resources/application.properties
		spring.application.name=servicio-productos
		server.port=8001
		
		# H2 Database
		spring.h2.console.enabled=true					//Esto para entrar a la consola por web https://www.geeksforgeeks.org/spring-boot-h2-database/
		spring.datasource.url=jdbc:h2:mem:dcbapp		//Esto se pone en consola web para conectar
		spring.datasource.driverClassName=org.h2.Driver
		spring.datasource.username=sa
		spring.datasource.password=password
		spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
		
	-Creando el repositorio JPA para los productos
		-Crear Interface ProductoDao.java -> en package productos.models.dao
		-Crear clase IProductoService     -> en package productos.models.service
	-Balanceo de carga con Ribbon
	
	- Para obtener datos del properties
	@Autowired
	pirivate Environment env;
	Integet puerto = Integer.parseInt(env.getProperty("nombredelproperty"));
	
3.-	Eureka Server: registrando microservicios
	>New Spring Sterter Project
		-> add Spring Boot DevTools
		-> add Eureka Server
	> Add en application properties (Esto es para el servidor)
		spring.application.name=servicio-eureka-server
		server.port=8761
		eureka.client.register-with-eureka=false
		eureka.client.fetch-registry=false
		eureka.client.service-url.defaultZone=http://localhost:8761/eureka
		logging.level.org.hibernate.SQL=debug           //para mostrar las sentencias sql al ejecutar
		
	> Configurar el microservicio cliente
		>Click derecho en proyecto->Spring->Add Starter->
			>Agregar Cloud Discovery->Eureka Discovery
	> cambiar el puerto fijo por puerto dinámico en properties a todos los micros clientes
		server.port=${PORT:0}
		eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}
	> Crear las clases Usuarios y Roles




4.-Spring Cloud API Gateway (vs Zuul)
	Configurando Spring Cloud Gateway
	>New Spring starter project
		> add Spring Boot DevTool
		> add Eureka Discovery Client
		> add Gateway

6.- Spring Cloud Config Server
	>Crear nuevo proyecto Spring starter Project
		>Add DevTool
		>Add Config Server
	>Crear repo git
		C:\Users\Gamer\Desktop\config>git config --global user.email "pablofierrovallejos@gmail.com"
		C:\Users\Gamer\Desktop\config>git config --global user.name "pablofierrovallejos"
		C:\Users\Gamer\Desktop\config>git init
		echo server.port=8005 > servicio-items.properties
	>Modificar starters a servicio items
		>Add Config Client
		
		
			
9 Oauth2 y jwt
Proveedor de Seguridad LDAP
	*** sub capitulo 78 Intro a jwt
	- Lo mas sencillo es trabajar con sesiones (para una app que tiene todo (no microservicios)
	- Se usan token para integrar diferentes aplicaciones
	- jwt tiene toda la info del usuario, (se puede decodificar y leer, no puede llevar contraseñas)
	- Si no se establece tiempo de caducidad no se caduca nunca, lo común es que dure 2 o 3 semanas (1 hora esta ok)
	- Es stateless
	- Flujo
		1.- Login (autenticación) , se envía usuario y pass al server
		2.- Servidor valida usuario y genera el token jwt para enviar al cliente
		3.- Cliente hace una petición de api con el token
		4.- Servidor valida token y obtiene permisos del usuario para autorizar acceso al api
	*** sub capitulo 79 algo mas de jwt
		- revisar https://jwt.io/
		- JWT se compone de 3 partes
			1.- HEADER
			2.- DATA  (codificada en base64)
			3.- VERIFY SIGNATURE
		- Desde la web se puede obtener el token desde F12->Application->Storage->LocalStorage
		- separar un token
			let token = eltoken
			let payload = token,split(".")[1]
			window.atob(payload)
			JSON.parse(window.atob(payload))
		- Para implementacion usamos de spring.io  -> Spring Security OAUTH
	*** sub capitulo 80
		Oauth se compone de 2 partes
		- Servidor> de Autorizador (autentica al usuario y genera el jwt)
		- Servidor> Resource Server(administra los permisos y accesos al recurso)
		- Lo que se tiene que enviar al servidor de autorizacion
			url: POST/auth/token
				header
					Authorization: Basic Base64(client_id:client_secret)
					Content-Type:  application/x-www-form-urlencoded
				body
					grant_type = password
					username= andres
					password = 12345
		  			
		 - Lo que se tiene que enviar al servidor de recursos
			url: GET /api/clientes
			header: Authorization Bearer access_token  <-- el token obtenido del paso anterior
			body: la data
			
	*** sub capituo 81
		- creando microservicio usuarios
			- 
			
			
			ServDeAutoriz <------>Usuarios 
			      A        /------A  
			      |     /--
				  V /---
                 Zuul <--------------------> Servidor ---> git
             Servidor de recursos		       Config		 
					
		- crear proyecto usuarios
			- agregar dependencias
				- Eureka Discovery Client
				- Spring boot dev tools
				- Sprig Web Starter
				- Spring Data JPA
				- H2 database
		- agregar a application.properties
			  spring.application.name=servicio-usuarios
			  server.port=${PORT:0}
			  eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}
		- crear package .usuarios.models.entity
			- crear clase Usuario y Role
		- Agregar dependencia Rest Repository para generar el controlador
		
		
		
11 Configuracion Datasource Mysql en servicio productos
	>Click derecho en proyecto->Spring->Add Starter->Add MySQL Driver
	>Agregar lo siguiente a application.properties
		  spring.datasource.url=jdbc:mysql://localhost:3306/db_springboot_cloud?serverTimezone=America/Santiago&allowPublicKeyRetrival=true&useSSL=false
		  spring.datasource.username=root
		  spring.datasource.password=sasa
		  spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
		  spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
		  spring.jpa.hibernate.ddl-auto=create   //Es para desarrollo solamente dado que borra las tablas
		  logging.level.org.hibernate.SQL=debug
		  

14 Despliegue
	-docker --version  //Para conocer versión de docker instalada
	-C:\springcloud\workspace\springboot-servicio-productos   //Ir a la ruta del proyecto
	
	- .\mvnw clean package    //limpiar proyecto y generar jar   --> se genera el jar en carpeta target de nuestro proyecto
	
		- Fatal error compiling: error: invalid target release: 17 -> [Help 1]
		     - Esto es por que el proyecto tiene una versión java 17 que es distinta a mvn
			 - mvn -version    //Para saber la versión de java que usa mvn aca da 11
			 - podemos revisar la version de java en ide desde:
				-Propiedades del proyecto->Java Compiler
				-Windows->Preference->Java->Compiler
			 -En este caso cambiamos el jdk de maven a 17
				-Se instala el jdk y se valida que quede en C:\Program Files\Java\jdk-17
				-Se cambia variable entorno 	
					-Variable de usuario JAVA_HOME = C:\Program Files\Java\jdk-17
					-Variable de sistema JAVA_HOME = C:\Program Files\Java\jdk-17
			 
	- Creamos archivo Docker en nuestro proyecto
		- Obtenemos jdk de dockerhub -> https://hub.docker.com/search?q=openjdk
		Generamos el Dockerfile con:
			FROM openjdk:17
			VOLUME /tmp
			EXPOSE 8888
			ADD ./target/springboot-servicio-productos-0.0.1-SNAPSHOT.jar servicio-producto.jar
			ENTRYPOINT ["java", "-jar", "servicio-producto.jar"]
	-Ejecutamos el build y desplegamos:
		- docker build -t servicio-producto:v1 .
		- docker images							//Para ver que el contenedor se haya generado ok
		- docker network create springcloud 	//Para crear la red donde estará el contenedor
		       - 8ffd72b0743f4a11358e31ecdaee5fc08ffe018e0cf50e2536f82d4057ef7176
		- docker run -p 8001:8001 --name servicio-producto --network springcloud servicio-producto:v1
		- docker container ls		//Para ver los contenedores
		- docker container --help  	//Para ver comandos de container
	    - docker ps -a				//Para ver todos los contenedores no importa su estado
		- docker start fe2c1aac5b4a //Para iniciar un contenedor de la lista anterior que esté detenido
		
		docker build -t servicio-eureka:v1 .
		docker run -d -p 8761:8761 --name servicio-eureka --network springcloud servicio-eureka:v1 --net=bridge
		
		docker build -t servicio-apigateway:v1 .
		docker run -p 8090:8090 --name servicio-apigateway --network springcloud servicio-apigateway:v1
		
	    docker build -t servicio-producto:v1 .
		docker run -p 8001:8001 --name servicio-producto --network springcloud servicio-producto:v1 --net=bridge
		
		CONTAINER ID   IMAGE                    COMMAND                  CREATED             STATUS          PORTS                    NAMES
754e11da0976   servicio-apigateway:v1   "java -jar servicio-…"   4 minutes ago       Up 2 minutes    0.0.0.0:8090->8090/tcp   servicio-apigateway
ea9d1270c5b9   servicio-eureka:v1       "java -jar servicio-…"   6 minutes ago       Up 6 minutes    0.0.0.0:8761->8761/tcp   servicio-eureka
7ffdaf852285   servicio-producto:v1     "java -jar servicio-…"   About an hour ago   Up 15 minutes   0.0.0.0:8001->8001/tcp   servicio-producto


		  docker inspect 754e11da0976  
		  "NetworkID": "8ffd72b0743f4a11358e31ecdaee5fc08ffe018e0cf50e2536f82d4057ef7176",
                    "EndpointID": "c7ee5fb45920db1229035badac0a122a756fe850f941632761e30f304fba4b5f",
                    "Gateway": "172.18.0.1",
                    "IPAddress": "172.18.0.4",
					
		  docker inspect ea9d1270c5b9  
		   "NetworkID": "8ffd72b0743f4a11358e31ecdaee5fc08ffe018e0cf50e2536f82d4057ef7176",
                    "EndpointID": "67e13a149ceef08add105a0ca05b21abae72a7d749b2c56bb0364c51d9f50d91",
                    "Gateway": "172.18.0.1",
                    "IPAddress": "172.18.0.3",
					
		  docker inspect 7ffdaf852285  
		   "NetworkID": "8ffd72b0743f4a11358e31ecdaee5fc08ffe018e0cf50e2536f82d4057ef7176",
                    "EndpointID": "0d82c6669721f4480b77e0b02cff34117787f3fbe2d310d64034f5444c1f144e",
                    "Gateway": "172.18.0.1",
                    "IPAddress": "172.18.0.2",
					
		
	  Para entrar a terminal de un contenedor
	docker exec -it 754e11da0976 bash
	
	Para ver los contenedores de la red
	> docker network inspect bridge
	
	
Desplegar MicroServicio productos
	1.- Crear archivo "Dockerfile" en raiz de nuestro proyecto (SE ELIMINA EL EXPOSE)
			FROM openjdk:17
			VOLUME /tmp
			ADD ./target/springboot-servicio-productos-0.0.1-SNAPSHOT.jar servicio-productos.jar
			ENTRYPOINT ["java", "-jar", "servicio-productos.jar"]
			
	2.- Crear el jar: (Se deshabilita el test dado que no existe la red y no puede conectarse a mysql)
		.\mvnw clean package -DskipTests
			
	3.- Construir la imagen
		docker build -t servicio-productos:v1 . 
	
	4.-Levantar servicio
		docker run -P --network springcloud servicio-productos:v1
Errores
	 Public Key Retrieval is not allowed (ver url config mysql)
	 
	 
	 
	 "fechaventa": "2023-05-23T11:38:34.533+00:00",
	 

