Instalación
1.- Descargar de https://www.python.org/downloads/windows/
Asegurar que esté checkeado "Add python to path"

2.- Instalar pycharm Comunity: https://www.jetbrains.com/pycharm/
Customize
Cap1
	print() input()
Cap2
	1.-string(str)
	2.-integer(int)
	3.-floating(float)
	4.-listas(list)
	5.-diccionarios(dic)  //pares clave valor
	6.-tuples(tuple)
	7.-sets(set)	
	8.-booleanos(bool)
Operadores
  + , - , * , / , // (resultado division pero como entero, % (módulo o resto), ** (potencia)	
  
  
Cap13 Asistente de voz  ( - pyttsx3)
Desde: File
		Settings
			Project
				Python interpreter +
					add pyttsx3
					add SpeechRecognition (voz a texto)
					add pywhatkit (para abrir sitios web como whatsao)
					add yfinance  (para abrir yahoo finance)
					add pyjokes   (para hacer chistes)

Cap11
WebScraping
import bs4  /beautifullsoup
import requests

resultado = requests.get('https://www.mipagina.cl')

soap = bs4.BeautifulSoup(resultado.text, 'lxml')
print(soap.select('title')) 	//retorna una lista
print(soap.select('title')[0].getText()) 	//Retorna el primer title y sin tags html

soup.select('#estilo_4')	//elementos que contengan id='estilo4'
soup.select('.columna_der')	//elementos que contengan class='columna_der'
soup.select('div span')		//cualquier elemento llamado span dentro  de un elemento div
soup.select('div>span')		//cualquier elemento llamado 'span' directamente dentro de un elemento div, sin nada en el medio
-------------------------------------------------------------------------  
Cap14
Reconocimiento facial
1.-descargar visual studio comunity https://visualstudio.microsoft.com/es/downloads/
  >opcion Desarrollo para escritorio con C++

2.-File ->settings->project-> Python interpreter -> +
	Agregar-> cmake
	Agregar->dlib
	Agregar->face-recognition
	Agregar->numpy
	Agregar->opencv-python
	
	
	
--- Base de datos mysql
#pip install PyMySql
import pymysql

db = pymysql.connect(host='192.168.0.100', user='root', password='sasa')

cursor = db.cursor()
cursor.execute("SHOW DATABASES")
cursor.close()
db.close()

for database in cursor:
    print(database)



------------------
//PaRA crear un entorno virtual
py -m venv miproyecto	


Instalar FastAPI
>pip install fastapi uvicorn

from fastapi import FastAPI
app = FastAPI()

@app.get('/hola')
def read_root():
	return {'Hello','World'}
	
subir con:
> uvicorn main:app --reload				 //desplegado en puerto default 8000
> uvicorn main:app --reload --port 4000  //para desplegarlo en puerto 4000
> uvicorn miapi:app --reload --port 4000 //cuando mi archivo principal con api se llama miapi.py

Doc automatica
Abrir en navegador
> 127.0.0.1:4000/docs

Para ver las lib instaladas
> py -m pip freeze
> py -m pip freeze > requirements.txt   //Para crear el archivo requerimientos que va en el Dockerfile


Dokerfile
---------------------------------
FROM python:3.13.2
COPY ./requirements.txt ./requirements.txt
RUN pip install -Ur requirements.txt

COPY . .
CMD ["uvicorn", "miapi:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
--
Ejecutar con:
> docker run -p 8000:8000 -t v1:latest


Para flask
Dokerfile
---------------------------------------
FROM python:3.10.11-slim-bullseye
COPY ./requirements.txt ./requirements.txt
RUN pip install -Ur requirements.txt

COPY . .

CMD [ "python3", "-m" , "flask", "--app","home","run", "--port=8080","--host=0.0.0.0"] 
--
Ejecutar con 
docker run -p 8080:8080 -t toolkit:v1

Para hacer el build
> docker build -t toolkit:v2 

Para guardar una imagen
> docker save -o toolkitv2.tar 8dc8ca8758d

Para cargar una imagen del disco
> docker import toolkitv2.tar toolkit:v1
